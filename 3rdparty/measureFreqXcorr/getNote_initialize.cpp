/*
 * getNote_initialize.cpp
 *
 * Code generation for function 'getNote_initialize'
 *
 * C source code generated on: Sun Jan 29 01:38:19 2012
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "getNote.h"
#include "measureFreqXcorr.h"
#include "getNote_initialize.h"
#include "getNote_data.h"

/* Type Definitions */

/* Named Constants */

/* Variable Declarations */

/* Variable Definitions */

/* Function Declarations */
static real_T rt_powd_snf(real_T u0, real_T u1);

/* Function Definitions */
static real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  real_T d0;
  real_T d1;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = rtNaN;
  } else {
    d0 = fabs(u0);
    d1 = fabs(u1);
    if (rtIsInf(u1)) {
      if (d0 == 1.0) {
        y = rtNaN;
      } else if (d0 > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
      y = rtNaN;
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

void getNote_initialize(void)
{
  int32_T k;
  static const real_T dv0[145] = { -4.0, -3.9166666666666665,
    -3.8333333333333335, -3.75, -3.6666666666666665, -3.5833333333333335, -3.5,
    -3.4166666666666665, -3.3333333333333335, -3.25, -3.1666666666666665,
    -3.0833333333333335, -3.0, -2.9166666666666665, -2.8333333333333335, -2.75,
    -2.6666666666666665, -2.5833333333333335, -2.5, -2.4166666666666665,
    -2.3333333333333335, -2.25, -2.1666666666666665, -2.0833333333333335, -2.0,
    -1.9166666666666667, -1.8333333333333333, -1.75, -1.6666666666666667,
    -1.5833333333333333, -1.5, -1.4166666666666667, -1.3333333333333333, -1.25,
    -1.1666666666666667, -1.0833333333333333, -1.0, -0.91666666666666663,
    -0.83333333333333337, -0.75, -0.66666666666666663, -0.58333333333333337,
    -0.5, -0.41666666666666669, -0.33333333333333331, -0.25,
    -0.16666666666666666, -0.083333333333333329, 0.0, 0.083333333333333329,
    0.16666666666666666, 0.25, 0.33333333333333331, 0.41666666666666669, 0.5,
    0.58333333333333337, 0.66666666666666663, 0.75, 0.83333333333333337,
    0.91666666666666663, 1.0, 1.0833333333333333, 1.1666666666666667, 1.25,
    1.3333333333333333, 1.4166666666666667, 1.5, 1.5833333333333333,
    1.6666666666666667, 1.75, 1.8333333333333333, 1.9166666666666667, 2.0,
    2.0833333333333335, 2.1666666666666665, 2.25, 2.3333333333333335,
    2.4166666666666665, 2.5, 2.5833333333333335, 2.6666666666666665, 2.75,
    2.8333333333333335, 2.9166666666666665, 3.0, 3.0833333333333335,
    3.1666666666666665, 3.25, 3.3333333333333335, 3.4166666666666665, 3.5,
    3.5833333333333335, 3.6666666666666665, 3.75, 3.8333333333333335,
    3.9166666666666665, 4.0, 4.083333333333333, 4.166666666666667, 4.25,
    4.333333333333333, 4.416666666666667, 4.5, 4.583333333333333,
    4.666666666666667, 4.75, 4.833333333333333, 4.916666666666667, 5.0,
    5.083333333333333, 5.166666666666667, 5.25, 5.333333333333333,
    5.416666666666667, 5.5, 5.583333333333333, 5.666666666666667, 5.75,
    5.833333333333333, 5.916666666666667, 6.0, 6.083333333333333,
    6.166666666666667, 6.25, 6.333333333333333, 6.416666666666667, 6.5,
    6.583333333333333, 6.666666666666667, 6.75, 6.833333333333333,
    6.916666666666667, 7.0, 7.083333333333333, 7.166666666666667, 7.25,
    7.333333333333333, 7.416666666666667, 7.5, 7.583333333333333,
    7.666666666666667, 7.75, 7.833333333333333, 7.916666666666667, 8.0 };

  rt_InitInfAndNaN(8U);
  for (k = 0; k < 145; k++) {
    notes[k] = rt_powd_snf(2.0, dv0[k]);
    notes[k] *= 110.0;
  }
}

/* End of code generation (getNote_initialize.cpp) */
